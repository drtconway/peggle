<whitespace character> :== " " | "\t" | "\r" | "\n" | "\f" | "\v"

<whitespace> :== [ <whitespace character>... ]

<ampersand> ::= "&"

<backslash> :== "\\"

<bar> ::= "|"

<comma> ::= ","

<concat> ::= "||"

<dot> :== "."

<double equals> ::= "=="

<double greater than> ::= ">>"

<double less than> ::= "<<"

<equals> ::= "="

<greater than> ::= ">"

<greater than or equal> ::= ">="

<left paren> ::= "("

<less than> ::= "<"

<less than greater than> ::= "<>"

<less than or equal> ::= "<="

<minus> ::= "-"

<not equals> ::= "!="

<percent> ::= "%"

<plus> ::= "+"

<quote> :== "'"

<right paren> ::= ")"

<slash> ::= "/"

<star> :== "*"

<tilde> :== "~"

<lower> :== a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

<upper> :== A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

<alpha> :== <lower> | <upper>

<digit> :== 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<digits> :== <digit>...

<hexit>
    :== 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      | a | b | c | d | e | f
      | A | B | C | D | E | F

<hexits> :== <hexit>...

<numeric literal>
    :== { { 0x | 0X } <hexits> }
      | { <digits> [ <dot> [ <digits> ] [ { e | E } [ <plus> | <minus> ] <digits> ] ] }
      | { <dot> [ <digits> ] [ { e | E } [ <plus> | <minus> ] <digits> ] }

<string literal character>
    :== <any character except backslash or quote>
      | <quote> <quote>
      | <character escape>

<character escape>
    :== <backslash> { t | r | n | f | v | <backslash> | <quote> }

<string literal body> :== [ <string literal character>... ]

<string literal part> :== <quote> <string literal body> <quote>

<string literal> :== <string literal part>...

<literal value> :== <numeric literal> | <string literal>

<identifier start character> :== <alpha>

<identifier part character> :== <alpha> | <digit> | "_"

<identifier> :== <identifier start character> [ <identifier part character>... ]

<qualified name> ::= <identifier> [ <dot> <identifier> [ <dot> <identifier> ] ]

<collation name> :== <identifier>

<column name> ::= <identifier>

<column alias> ::= <identifier>

<function name> ::= <identifier>

<table name> ::= <identifier>

<table alias> ::= <identifier>

<type name> :== <identifier>

<window name> :== <identifier>

<base window name> :== <identifier>

<select stmt> ::= [ <with clause> ] <select core> [ <order by clause> ] [ <limit clause> ]

<with clause> ::= WITH [ RECURSIVE ] <common table expression list>

<common table expression list> ::= <common table expression> [ { <comma> <common table expression> }... ]

<select core> ::= { <select core query> | <select core values> } [ <compound operator> <select core> ]

<select core query> ::= SELECT [ <select quantifier> ] <result column list>
    [ <from clause> ] [ <where clause> ] [ <group by clause> ]

<select quantifier> ::= DISTINCT | ALL

<result column list> ::= <result column> [ { <comma> <result column> }... ]

<result column>
    ::= <star>
      | { <table name> <dot> <star> }
      | { <expr> [ [ AS ] <column alias> ] }

<from clause> ::= FROM { <table or subquery list> | <join clause> }

<table or subquery list> ::= <table or subquery> [ { <comma> <table or subquery> }... ]

<where clause> ::= WHERE <expr>

<group by clause> ::= GROUP BY <expr list> [ HAVING <expr> ]

<select core values> ::= VALUES <values list>

<values list> ::= <values> [ { <comma> <values> }... ]

<values> ::= <left paren> <expr list> <right paren>

<order by clause> ::= ORDER BY <ordering term list>

<ordering term list> ::= <ordering term> [ { <comma> <ordering term> }... ]

<ordering term> ::= <expr> [ COLLATE <collation name> ] [ ASC | DESC ] [ NULLS FIRST | NULLS LAST ]

<limit clause> ::= LIMIT <expr> [ OFFSET <expr> | <comma> <expr> ]

<over clause> ::= OVER { <window name> | <window expression> }

<window expression> ::= <left paren> [ <base window name> ] [ PARTITION BY <expr list> ] <right paren>

<table or subquery>
    ::= { <left paren> { <join clause> | <table or subquery list> } <right paren> }
      | { <left paren>  <select stmt> <right paren> [ AS <table alias> ] }
      | { <qualified name> [ AS <table alias> ] }

<common table expression> ::= <table name> [ <left paren> <column name list> <right paren> ]
    AS [ [ NOT ] MATERIALIZED ] <left paren> <select stmt> <right paren>

<column name list> ::= <column name> [ { <comma> <column name> }... ]

<compound operator> ::= UNION ALL | UNION | INTERSECT | EXCEPT

<expr primary> ::=
      <literal value>
    | <qualified name>
    | <function expr>
    | { <left paren> <expr> [ { <comma> <expr> }... ] <right paren> }
    | <cast expr>
    | <not exists expr>
    | <case expr>

<expr prefix> ::= <unary operator> <expr primary>

<unary operator> ::= <tilde> | <plus> | <minus>

<expr collate> ::= <expr prefix> [ COLLATE <collation name> ]

<expr concat> ::= <expr collate> [ { <concat> <expr collate> }... ]

<expr multiplicative> ::= <expr concat> [ { <multiplicative operator> <expr concat> }... ]

<multiplicative operator> ::= <star> <slash> <percent>

<expr additive> ::= <expr multiplicative> [ { <additive operator> <expr multiplicative> }... ]

<additive operator> ::= <plus> | <minus>

<expr bitwise> ::= <expr additive> [ { <bitwise operator> <expr additive> }... ]

<bitwise operator> ::= <ampersand> | <bar> | <double less than> | <double greater than>

<expr comparison> ::= <expr bitwise> [ { <comparison operator> <expr bitwise> }... ]

<comparison operator> ::= <less than or equal> | <greater than or equal> | <less than> | <greater than>

<expr boolean> ::= <expr comparison> [ <expr boolean tail> ]

<expr boolean tail>
    ::= { <boolean operator> <expr comparison> }
      | { [ NOT ] LIKE <expr comparison> [ ESCAPE <expr comparison> ] }
      | { [ NOT ] <match operator> <expr comparison> }
      | <null operator>

<match operator> ::= GLOB | REGEXP | MATCH

<null operator> ::= ISNULL | NOTNULL | NOT NULL

<boolean operator> ::= <double equals> | <equals> | <not equals> | <less than greater than> | IS NOT | IS 

<expr negated> ::= [ NOT ] <expr boolean>

<expr logical> ::= <expr negated> [ { <logical operator> <expr negated> }... ]

<logical operator> ::= AND | OR

<expr> ::= <expr logical>

<expr list> ::= <expr> [ { <comma> <expr> }... ]

<function expr> ::= <function name> <left paren> [ <star> | { DISTINCT [ <expr list> ] } ] <right paren> [ <filter clause> ] [ <over clause> ]

<filter clause> ::= FILTER <left paren> WHERE <expr> <right paren>

<cast expr> ::= CAST <left paren> <expr> AS <type name> <right paren>

<not exists expr> ::= NOT EXISTS <left paren> <select stmt> <right paren>

<case expr> ::= CASE <expr> <case when clause>... [ ELSE <expr> ] END

<case when clause> ::= WHEN <expr> THEN <expr>

<join clause> ::= <table or subquery> [ { <join operator> <table or subquery> <join constraint> }... ]

<join operator>
    ::= <comma>
      | [ NATURAL ] [ { LEFT [ OUTER] | INNER | CROSS } ] JOIN

<join constraint>
    ::= { ON <expr> }
      | { USING <left paren> <column name list> <right paren> }